apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

if (isNewArchitectureEnabled()) {
    apply plugin: 'com.facebook.react'
}

def _ext = rootProject.ext

def _reactNativeVersion = _ext.has('reactNative') ? _ext.reactNative : '+'
def _compileSdkVersion = _ext.has('compileSdkVersion') ? _ext.compileSdkVersion : 30
def _buildToolsVersion = _ext.has('buildToolsVersion') ? _ext.buildToolsVersion : '30.0.2'
def _minSdkVersion = _ext.has('minSdkVersion') ? _ext.minSdkVersion : 21
def _targetSdkVersion = _ext.has('targetSdkVersion') ? _ext.targetSdkVersion : 30
def _kotlinVersion = _ext.has('kotlinVersion') ? _ext.kotlinVersion : '1.5.30'
def _junitVersion = _ext.has('junitVersion') ? _ext.junitVersion : '4.13.2'
def _mockitoVersion = _ext.has('mockitoVersion') ? _ext.mockitoVersion : '3.2.0'
def _androidTestRunnerVersion = _ext.has('androidTestRunnerVersion') ? _ext.androidTestRunnerVersion : '1.1.0'

android {
    compileSdkVersion _compileSdkVersion
    // Used to override the NDK path/version on internal CI or by allowing
    // users to customize the NDK path/version from their root project (e.g. for M1 support)
    if (rootProject.hasProperty("ndkPath")) {
        ndkPath rootProject.ext.ndkPath
    }
    if (rootProject.hasProperty("ndkVersion")) {
        ndkVersion rootProject.ext.ndkVersion
    }
    buildToolsVersion _buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'

        if (isNewArchitectureEnabled()) {
            main.java.srcDirs += 'src/fabric/java'
        } else {
            // this folder also includes files from codegen so the library can compile with
            // codegen turned off
            // TODO: This won't work for now!!!!
            main.java.srcDirs += 'src/paper/java'
        }
    }

    defaultConfig {
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
        if (isNewArchitectureEnabled()) {
            var appProject = rootProject.allprojects.find {it.plugins.hasPlugin('com.android.application')}
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_PLATFORM=android-21",
                            "APP_STL=c++_shared",
                            "NDK_TOOLCHAIN_VERSION=clang",
                            "GENERATED_SRC_DIR=${appProject.buildDir}/generated/source",
                            "PROJECT_BUILD_DIR=${appProject.buildDir}",
                            "REACT_ANDROID_DIR=${appProject.rootDir}/../node_modules/react-native/ReactAndroid",
                            "REACT_ANDROID_BUILD_DIR=${appProject.rootDir}/../node_modules/react-native/ReactAndroid/build"
                    cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
                    cppFlags "-std=c++17"
                    targets "rnflashlist_modules"
                }
            }
        }
    }

     if (isNewArchitectureEnabled()) {
         externalNativeBuild {
             ndkBuild {
                 path "src/main/jni/Android.mk"
             }
         }
     }

    packagingOptions {
        // For some reason gradle only complains about the duplicated version of libreact_render libraries
        // while there are more libraries copied in intermediates folder of the lib build directory, we exclude
        // only the ones that make the build fail (ideally we should only include librngesturehandler_modules but we
        // are only allowed to specify exclude patterns)
        exclude "**/libreact_render*.so"
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
      unitTests.returnDefaultValues = true
    }
}

dependencies {
    compileOnly "com.facebook.react:react-native:${_reactNativeVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${_kotlinVersion}"
    testImplementation "junit:junit:${_junitVersion}"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${_mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${_mockitoVersion}"
    testImplementation 'com.google.code.gson:gson:2.8.9'
    androidTestImplementation("androidx.test:runner:${_androidTestRunnerVersion}")
    androidTestImplementation("androidx.test:rules:${_androidTestRunnerVersion}")
}

if (isNewArchitectureEnabled()) {
    react {
        reactRoot = rootProject.file("../node_modules/react-native/")
        jsRootDir = file("../src/fabric/")
        codegenDir = rootProject.file("../node_modules/react-native-codegen/")
        libraryName = "rnflashlist"
        codegenJavaPackageName = "com.shopify.reactnative.flash_list"
    }
}
